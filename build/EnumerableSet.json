{
  "abi": [],
  "evm": {
    "bytecode": {
      "linkReferences": {},
      "object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ddb8e65647a0d6f0c0fadf599965308095077188d3686a332296c090e546bd5964736f6c634300060a0033",
      "opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDD 0xB8 0xE6 JUMP SELFBALANCE LOG0 0xD6 CREATE 0xC0 STATICCALL 0xDF MSIZE SWAP10 PUSH6 0x308095077188 0xD3 PUSH9 0x6A332296C090E546BD MSIZE PUSH5 0x736F6C6343 STOP MOD EXP STOP CALLER ",
      "sourceMap": "752:7314:22:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
    },
    "deployedBytecode": {
      "immutableReferences": {},
      "linkReferences": {},
      "object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ddb8e65647a0d6f0c0fadf599965308095077188d3686a332296c090e546bd5964736f6c634300060a0033",
      "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDD 0xB8 0xE6 JUMP SELFBALANCE LOG0 0xD6 CREATE 0xC0 STATICCALL 0xDF MSIZE SWAP10 PUSH6 0x308095077188 0xD3 PUSH9 0x6A332296C090E546BD MSIZE PUSH5 0x736F6C6343 STOP MOD EXP STOP CALLER ",
      "sourceMap": "752:7314:22:-:0;;;;;;;;"
    }
  },
  "metadata": "{\"compiler\":{\"version\":\"0.6.10+commit.00c0fcaf\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ``` contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256` (`UintSet`) are supported.\",\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/utils/EnumerableSet.sol\":\"EnumerableSet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/utils/EnumerableSet.sol\":{\"keccak256\":\"0x198dd32d82c3f182f3a9b9f91e524b499c9489f334d2b97dab55a1c9df0f1846\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c40d1a00347a539692e8916621261951e21d75589038a38b18246f278d4dccb1\",\"dweb:/ipfs/QmUwiNaVToekgxfCzheub2VERd37BGtkYKcgrksHX8iudK\"]}},\"version\":1}",
  "bytecode": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ddb8e65647a0d6f0c0fadf599965308095077188d3686a332296c090e546bd5964736f6c634300060a0033"
}